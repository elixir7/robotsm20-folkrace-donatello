
donatello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001d38  08001d38  00011d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d68  08001d68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d68  08001d68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d68  08001d68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d68  08001d68  00011d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d6c  08001d6c  00011d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08001d7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001d7c  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069ad  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000122b  00000000  00000000  000269e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000878  00000000  00000000  00027c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d0  00000000  00000000  00028488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000bdc7  00000000  00000000  00028c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000062a4  00000000  00000000  00034a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00045a57  00000000  00000000  0003acc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008071a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df8  00000000  00000000  00080798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001d20 	.word	0x08001d20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001d20 	.word	0x08001d20

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa2c 	bl	8000680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f82a 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8d2 	bl	80003d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000230:	f000 f866 	bl	8000300 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, GPIO_PIN_SET);
 8000234:	4b10      	ldr	r3, [pc, #64]	; (8000278 <main+0x58>)
 8000236:	2201      	movs	r2, #1
 8000238:	2140      	movs	r1, #64	; 0x40
 800023a:	0018      	movs	r0, r3
 800023c:	f000 fcc2 	bl	8000bc4 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000240:	4b0e      	ldr	r3, [pc, #56]	; (800027c <main+0x5c>)
 8000242:	2100      	movs	r1, #0
 8000244:	0018      	movs	r0, r3
 8000246:	f001 f96f 	bl	8001528 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(STEER_DIR_GPIO_Port,  STEER_DIR_Pin, GPIO_PIN_SET);
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <main+0x58>)
 800024c:	2201      	movs	r2, #1
 800024e:	2180      	movs	r1, #128	; 0x80
 8000250:	0018      	movs	r0, r3
 8000252:	f000 fcb7 	bl	8000bc4 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000256:	4b09      	ldr	r3, [pc, #36]	; (800027c <main+0x5c>)
 8000258:	2104      	movs	r1, #4
 800025a:	0018      	movs	r0, r3
 800025c:	f001 f964 	bl	8001528 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000260:	2390      	movs	r3, #144	; 0x90
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	2101      	movs	r1, #1
 8000266:	0018      	movs	r0, r3
 8000268:	f000 fcc9 	bl	8000bfe <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800026c:	23fa      	movs	r3, #250	; 0xfa
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fa69 	bl	8000748 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000276:	e7f3      	b.n	8000260 <main+0x40>
 8000278:	48000400 	.word	0x48000400
 800027c:	20000028 	.word	0x20000028

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b091      	sub	sp, #68	; 0x44
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	2410      	movs	r4, #16
 8000288:	193b      	adds	r3, r7, r4
 800028a:	0018      	movs	r0, r3
 800028c:	2330      	movs	r3, #48	; 0x30
 800028e:	001a      	movs	r2, r3
 8000290:	2100      	movs	r1, #0
 8000292:	f001 fd3d 	bl	8001d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000296:	003b      	movs	r3, r7
 8000298:	0018      	movs	r0, r3
 800029a:	2310      	movs	r3, #16
 800029c:	001a      	movs	r2, r3
 800029e:	2100      	movs	r1, #0
 80002a0:	f001 fd36 	bl	8001d10 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a4:	0021      	movs	r1, r4
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2202      	movs	r2, #2
 80002aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2201      	movs	r2, #1
 80002b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2210      	movs	r2, #16
 80002b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2200      	movs	r2, #0
 80002bc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 fcb7 	bl	8000c34 <HAL_RCC_OscConfig>
 80002c6:	1e03      	subs	r3, r0, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002ca:	f000 f8e5 	bl	8000498 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	003b      	movs	r3, r7
 80002d0:	2207      	movs	r2, #7
 80002d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d4:	003b      	movs	r3, r7
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	003b      	movs	r3, r7
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e0:	003b      	movs	r3, r7
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e6:	003b      	movs	r3, r7
 80002e8:	2100      	movs	r1, #0
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 ffbe 	bl	800126c <HAL_RCC_ClockConfig>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002f4:	f000 f8d0 	bl	8000498 <Error_Handler>
  }
}
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	b011      	add	sp, #68	; 0x44
 80002fe:	bd90      	pop	{r4, r7, pc}

08000300 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b08a      	sub	sp, #40	; 0x28
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000306:	2320      	movs	r3, #32
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	0018      	movs	r0, r3
 800030c:	2308      	movs	r3, #8
 800030e:	001a      	movs	r2, r3
 8000310:	2100      	movs	r1, #0
 8000312:	f001 fcfd 	bl	8001d10 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	0018      	movs	r0, r3
 800031a:	231c      	movs	r3, #28
 800031c:	001a      	movs	r2, r3
 800031e:	2100      	movs	r1, #0
 8000320:	f001 fcf6 	bl	8001d10 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000324:	4b2a      	ldr	r3, [pc, #168]	; (80003d0 <MX_TIM2_Init+0xd0>)
 8000326:	2280      	movs	r2, #128	; 0x80
 8000328:	05d2      	lsls	r2, r2, #23
 800032a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800032c:	4b28      	ldr	r3, [pc, #160]	; (80003d0 <MX_TIM2_Init+0xd0>)
 800032e:	2200      	movs	r2, #0
 8000330:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000332:	4b27      	ldr	r3, [pc, #156]	; (80003d0 <MX_TIM2_Init+0xd0>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000338:	4b25      	ldr	r3, [pc, #148]	; (80003d0 <MX_TIM2_Init+0xd0>)
 800033a:	22fa      	movs	r2, #250	; 0xfa
 800033c:	0092      	lsls	r2, r2, #2
 800033e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000340:	4b23      	ldr	r3, [pc, #140]	; (80003d0 <MX_TIM2_Init+0xd0>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000346:	4b22      	ldr	r3, [pc, #136]	; (80003d0 <MX_TIM2_Init+0xd0>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800034c:	4b20      	ldr	r3, [pc, #128]	; (80003d0 <MX_TIM2_Init+0xd0>)
 800034e:	0018      	movs	r0, r3
 8000350:	f001 f8be 	bl	80014d0 <HAL_TIM_PWM_Init>
 8000354:	1e03      	subs	r3, r0, #0
 8000356:	d001      	beq.n	800035c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000358:	f000 f89e 	bl	8000498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800035c:	2120      	movs	r1, #32
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800036a:	187a      	adds	r2, r7, r1
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <MX_TIM2_Init+0xd0>)
 800036e:	0011      	movs	r1, r2
 8000370:	0018      	movs	r0, r3
 8000372:	f001 fc51 	bl	8001c18 <HAL_TIMEx_MasterConfigSynchronization>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800037a:	f000 f88d 	bl	8000498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2260      	movs	r2, #96	; 0x60
 8000382:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000396:	1d39      	adds	r1, r7, #4
 8000398:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <MX_TIM2_Init+0xd0>)
 800039a:	2200      	movs	r2, #0
 800039c:	0018      	movs	r0, r3
 800039e:	f001 f909 	bl	80015b4 <HAL_TIM_PWM_ConfigChannel>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80003a6:	f000 f877 	bl	8000498 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003aa:	1d39      	adds	r1, r7, #4
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_TIM2_Init+0xd0>)
 80003ae:	2204      	movs	r2, #4
 80003b0:	0018      	movs	r0, r3
 80003b2:	f001 f8ff 	bl	80015b4 <HAL_TIM_PWM_ConfigChannel>
 80003b6:	1e03      	subs	r3, r0, #0
 80003b8:	d001      	beq.n	80003be <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80003ba:	f000 f86d 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003be:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <MX_TIM2_Init+0xd0>)
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 f8af 	bl	8000524 <HAL_TIM_MspPostInit>

}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b00a      	add	sp, #40	; 0x28
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	20000028 	.word	0x20000028

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b590      	push	{r4, r7, lr}
 80003d6:	b089      	sub	sp, #36	; 0x24
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	240c      	movs	r4, #12
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	0018      	movs	r0, r3
 80003e0:	2314      	movs	r3, #20
 80003e2:	001a      	movs	r2, r3
 80003e4:	2100      	movs	r1, #0
 80003e6:	f001 fc93 	bl	8001d10 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b29      	ldr	r3, [pc, #164]	; (8000490 <MX_GPIO_Init+0xbc>)
 80003ec:	695a      	ldr	r2, [r3, #20]
 80003ee:	4b28      	ldr	r3, [pc, #160]	; (8000490 <MX_GPIO_Init+0xbc>)
 80003f0:	2180      	movs	r1, #128	; 0x80
 80003f2:	0289      	lsls	r1, r1, #10
 80003f4:	430a      	orrs	r2, r1
 80003f6:	615a      	str	r2, [r3, #20]
 80003f8:	4b25      	ldr	r3, [pc, #148]	; (8000490 <MX_GPIO_Init+0xbc>)
 80003fa:	695a      	ldr	r2, [r3, #20]
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	029b      	lsls	r3, r3, #10
 8000400:	4013      	ands	r3, r2
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000406:	4b22      	ldr	r3, [pc, #136]	; (8000490 <MX_GPIO_Init+0xbc>)
 8000408:	695a      	ldr	r2, [r3, #20]
 800040a:	4b21      	ldr	r3, [pc, #132]	; (8000490 <MX_GPIO_Init+0xbc>)
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	02c9      	lsls	r1, r1, #11
 8000410:	430a      	orrs	r2, r1
 8000412:	615a      	str	r2, [r3, #20]
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <MX_GPIO_Init+0xbc>)
 8000416:	695a      	ldr	r2, [r3, #20]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	02db      	lsls	r3, r3, #11
 800041c:	4013      	ands	r3, r2
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000422:	2390      	movs	r3, #144	; 0x90
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	2200      	movs	r2, #0
 8000428:	2101      	movs	r1, #1
 800042a:	0018      	movs	r0, r3
 800042c:	f000 fbca 	bl	8000bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_DIR_Pin|STEER_DIR_Pin, GPIO_PIN_RESET);
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <MX_GPIO_Init+0xc0>)
 8000432:	2200      	movs	r2, #0
 8000434:	21c0      	movs	r1, #192	; 0xc0
 8000436:	0018      	movs	r0, r3
 8000438:	f000 fbc4 	bl	8000bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800043c:	193b      	adds	r3, r7, r4
 800043e:	2201      	movs	r2, #1
 8000440:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2201      	movs	r2, #1
 8000446:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	2200      	movs	r2, #0
 8000452:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000454:	193a      	adds	r2, r7, r4
 8000456:	2390      	movs	r3, #144	; 0x90
 8000458:	05db      	lsls	r3, r3, #23
 800045a:	0011      	movs	r1, r2
 800045c:	0018      	movs	r0, r3
 800045e:	f000 fa49 	bl	80008f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_DIR_Pin STEER_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin|STEER_DIR_Pin;
 8000462:	0021      	movs	r1, r4
 8000464:	187b      	adds	r3, r7, r1
 8000466:	22c0      	movs	r2, #192	; 0xc0
 8000468:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2201      	movs	r2, #1
 800046e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047c:	187b      	adds	r3, r7, r1
 800047e:	4a05      	ldr	r2, [pc, #20]	; (8000494 <MX_GPIO_Init+0xc0>)
 8000480:	0019      	movs	r1, r3
 8000482:	0010      	movs	r0, r2
 8000484:	f000 fa36 	bl	80008f4 <HAL_GPIO_Init>

}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b009      	add	sp, #36	; 0x24
 800048e:	bd90      	pop	{r4, r7, pc}
 8000490:	40021000 	.word	0x40021000
 8000494:	48000400 	.word	0x48000400

08000498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <HAL_MspInit+0x44>)
 80004ac:	699a      	ldr	r2, [r3, #24]
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <HAL_MspInit+0x44>)
 80004b0:	2101      	movs	r1, #1
 80004b2:	430a      	orrs	r2, r1
 80004b4:	619a      	str	r2, [r3, #24]
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <HAL_MspInit+0x44>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	2201      	movs	r2, #1
 80004bc:	4013      	ands	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <HAL_MspInit+0x44>)
 80004c4:	69da      	ldr	r2, [r3, #28]
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <HAL_MspInit+0x44>)
 80004c8:	2180      	movs	r1, #128	; 0x80
 80004ca:	0549      	lsls	r1, r1, #21
 80004cc:	430a      	orrs	r2, r1
 80004ce:	61da      	str	r2, [r3, #28]
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <HAL_MspInit+0x44>)
 80004d2:	69da      	ldr	r2, [r3, #28]
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	055b      	lsls	r3, r3, #21
 80004d8:	4013      	ands	r3, r2
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b002      	add	sp, #8
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	40021000 	.word	0x40021000

080004ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d10b      	bne.n	8000518 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <HAL_TIM_PWM_MspInit+0x34>)
 8000502:	69da      	ldr	r2, [r3, #28]
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_TIM_PWM_MspInit+0x34>)
 8000506:	2101      	movs	r1, #1
 8000508:	430a      	orrs	r2, r1
 800050a:	61da      	str	r2, [r3, #28]
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <HAL_TIM_PWM_MspInit+0x34>)
 800050e:	69db      	ldr	r3, [r3, #28]
 8000510:	2201      	movs	r2, #1
 8000512:	4013      	ands	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b004      	add	sp, #16
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000

08000524 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b08b      	sub	sp, #44	; 0x2c
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052c:	2314      	movs	r3, #20
 800052e:	18fb      	adds	r3, r7, r3
 8000530:	0018      	movs	r0, r3
 8000532:	2314      	movs	r3, #20
 8000534:	001a      	movs	r2, r3
 8000536:	2100      	movs	r1, #0
 8000538:	f001 fbea 	bl	8001d10 <memset>
  if(htim->Instance==TIM2)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	429a      	cmp	r2, r3
 8000546:	d14a      	bne.n	80005de <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b27      	ldr	r3, [pc, #156]	; (80005e8 <HAL_TIM_MspPostInit+0xc4>)
 800054a:	695a      	ldr	r2, [r3, #20]
 800054c:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <HAL_TIM_MspPostInit+0xc4>)
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	0289      	lsls	r1, r1, #10
 8000552:	430a      	orrs	r2, r1
 8000554:	615a      	str	r2, [r3, #20]
 8000556:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <HAL_TIM_MspPostInit+0xc4>)
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	2380      	movs	r3, #128	; 0x80
 800055c:	029b      	lsls	r3, r3, #10
 800055e:	4013      	ands	r3, r2
 8000560:	613b      	str	r3, [r7, #16]
 8000562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000564:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <HAL_TIM_MspPostInit+0xc4>)
 8000566:	695a      	ldr	r2, [r3, #20]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <HAL_TIM_MspPostInit+0xc4>)
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	02c9      	lsls	r1, r1, #11
 800056e:	430a      	orrs	r2, r1
 8000570:	615a      	str	r2, [r3, #20]
 8000572:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <HAL_TIM_MspPostInit+0xc4>)
 8000574:	695a      	ldr	r2, [r3, #20]
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	02db      	lsls	r3, r3, #11
 800057a:	4013      	ands	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8000580:	2114      	movs	r1, #20
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	0212      	lsls	r2, r2, #8
 8000588:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058a:	000c      	movs	r4, r1
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2202      	movs	r2, #2
 8000590:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	2202      	movs	r2, #2
 80005a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 80005a4:	193a      	adds	r2, r7, r4
 80005a6:	2390      	movs	r3, #144	; 0x90
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 f9a1 	bl	80008f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STEER_PWM_Pin;
 80005b2:	0021      	movs	r1, r4
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2208      	movs	r2, #8
 80005b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2202      	movs	r2, #2
 80005be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2202      	movs	r2, #2
 80005d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(STEER_PWM_GPIO_Port, &GPIO_InitStruct);
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	4a05      	ldr	r2, [pc, #20]	; (80005ec <HAL_TIM_MspPostInit+0xc8>)
 80005d6:	0019      	movs	r1, r3
 80005d8:	0010      	movs	r0, r2
 80005da:	f000 f98b 	bl	80008f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b00b      	add	sp, #44	; 0x2c
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40021000 	.word	0x40021000
 80005ec:	48000400 	.word	0x48000400

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <HardFault_Handler+0x4>

08000600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000618:	f000 f87a 	bl	8000710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <LoopForever+0x6>)
  ldr r1, =_edata
 8000632:	490e      	ldr	r1, [pc, #56]	; (800066c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000634:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <LoopForever+0xe>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000648:	4c0b      	ldr	r4, [pc, #44]	; (8000678 <LoopForever+0x16>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000656:	f7ff ffe4 	bl	8000622 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800065a:	f001 fb35 	bl	8001cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065e:	f7ff fddf 	bl	8000220 <main>

08000662 <LoopForever>:

LoopForever:
    b LoopForever
 8000662:	e7fe      	b.n	8000662 <LoopForever>
  ldr   r0, =_estack
 8000664:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000670:	08001d70 	.word	0x08001d70
  ldr r2, =_sbss
 8000674:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000678:	2000006c 	.word	0x2000006c

0800067c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC1_IRQHandler>
	...

08000680 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <HAL_Init+0x24>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_Init+0x24>)
 800068a:	2110      	movs	r1, #16
 800068c:	430a      	orrs	r2, r1
 800068e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000690:	2000      	movs	r0, #0
 8000692:	f000 f809 	bl	80006a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000696:	f7ff ff05 	bl	80004a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
}
 800069c:	0018      	movs	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	40022000 	.word	0x40022000

080006a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <HAL_InitTick+0x5c>)
 80006b2:	681c      	ldr	r4, [r3, #0]
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <HAL_InitTick+0x60>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	0019      	movs	r1, r3
 80006ba:	23fa      	movs	r3, #250	; 0xfa
 80006bc:	0098      	lsls	r0, r3, #2
 80006be:	f7ff fd23 	bl	8000108 <__udivsi3>
 80006c2:	0003      	movs	r3, r0
 80006c4:	0019      	movs	r1, r3
 80006c6:	0020      	movs	r0, r4
 80006c8:	f7ff fd1e 	bl	8000108 <__udivsi3>
 80006cc:	0003      	movs	r3, r0
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 f903 	bl	80008da <HAL_SYSTICK_Config>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006d8:	2301      	movs	r3, #1
 80006da:	e00f      	b.n	80006fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d80b      	bhi.n	80006fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	2301      	movs	r3, #1
 80006e6:	425b      	negs	r3, r3
 80006e8:	2200      	movs	r2, #0
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 f8e0 	bl	80008b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_InitTick+0x64>)
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006f6:	2300      	movs	r3, #0
 80006f8:	e000      	b.n	80006fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	0018      	movs	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	b003      	add	sp, #12
 8000702:	bd90      	pop	{r4, r7, pc}
 8000704:	20000000 	.word	0x20000000
 8000708:	20000008 	.word	0x20000008
 800070c:	20000004 	.word	0x20000004

08000710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_IncTick+0x1c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	001a      	movs	r2, r3
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_IncTick+0x20>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	18d2      	adds	r2, r2, r3
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <HAL_IncTick+0x20>)
 8000722:	601a      	str	r2, [r3, #0]
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	20000008 	.word	0x20000008
 8000730:	20000068 	.word	0x20000068

08000734 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  return uwTick;
 8000738:	4b02      	ldr	r3, [pc, #8]	; (8000744 <HAL_GetTick+0x10>)
 800073a:	681b      	ldr	r3, [r3, #0]
}
 800073c:	0018      	movs	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20000068 	.word	0x20000068

08000748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000750:	f7ff fff0 	bl	8000734 <HAL_GetTick>
 8000754:	0003      	movs	r3, r0
 8000756:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	3301      	adds	r3, #1
 8000760:	d005      	beq.n	800076e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_Delay+0x40>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	001a      	movs	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	189b      	adds	r3, r3, r2
 800076c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	f7ff ffe0 	bl	8000734 <HAL_GetTick>
 8000774:	0002      	movs	r2, r0
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	429a      	cmp	r2, r3
 800077e:	d8f7      	bhi.n	8000770 <HAL_Delay+0x28>
  {
  }
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b004      	add	sp, #16
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000008 	.word	0x20000008

0800078c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	0002      	movs	r2, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b7f      	cmp	r3, #127	; 0x7f
 80007a0:	d828      	bhi.n	80007f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a2:	4a2f      	ldr	r2, [pc, #188]	; (8000860 <__NVIC_SetPriority+0xd4>)
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	089b      	lsrs	r3, r3, #2
 80007ac:	33c0      	adds	r3, #192	; 0xc0
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	589b      	ldr	r3, [r3, r2]
 80007b2:	1dfa      	adds	r2, r7, #7
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	0011      	movs	r1, r2
 80007b8:	2203      	movs	r2, #3
 80007ba:	400a      	ands	r2, r1
 80007bc:	00d2      	lsls	r2, r2, #3
 80007be:	21ff      	movs	r1, #255	; 0xff
 80007c0:	4091      	lsls	r1, r2
 80007c2:	000a      	movs	r2, r1
 80007c4:	43d2      	mvns	r2, r2
 80007c6:	401a      	ands	r2, r3
 80007c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	019b      	lsls	r3, r3, #6
 80007ce:	22ff      	movs	r2, #255	; 0xff
 80007d0:	401a      	ands	r2, r3
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	0018      	movs	r0, r3
 80007d8:	2303      	movs	r3, #3
 80007da:	4003      	ands	r3, r0
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e0:	481f      	ldr	r0, [pc, #124]	; (8000860 <__NVIC_SetPriority+0xd4>)
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	089b      	lsrs	r3, r3, #2
 80007ea:	430a      	orrs	r2, r1
 80007ec:	33c0      	adds	r3, #192	; 0xc0
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007f2:	e031      	b.n	8000858 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f4:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <__NVIC_SetPriority+0xd8>)
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	0019      	movs	r1, r3
 80007fc:	230f      	movs	r3, #15
 80007fe:	400b      	ands	r3, r1
 8000800:	3b08      	subs	r3, #8
 8000802:	089b      	lsrs	r3, r3, #2
 8000804:	3306      	adds	r3, #6
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	18d3      	adds	r3, r2, r3
 800080a:	3304      	adds	r3, #4
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	1dfa      	adds	r2, r7, #7
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	0011      	movs	r1, r2
 8000814:	2203      	movs	r2, #3
 8000816:	400a      	ands	r2, r1
 8000818:	00d2      	lsls	r2, r2, #3
 800081a:	21ff      	movs	r1, #255	; 0xff
 800081c:	4091      	lsls	r1, r2
 800081e:	000a      	movs	r2, r1
 8000820:	43d2      	mvns	r2, r2
 8000822:	401a      	ands	r2, r3
 8000824:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	019b      	lsls	r3, r3, #6
 800082a:	22ff      	movs	r2, #255	; 0xff
 800082c:	401a      	ands	r2, r3
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	0018      	movs	r0, r3
 8000834:	2303      	movs	r3, #3
 8000836:	4003      	ands	r3, r0
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <__NVIC_SetPriority+0xd8>)
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	001c      	movs	r4, r3
 8000844:	230f      	movs	r3, #15
 8000846:	4023      	ands	r3, r4
 8000848:	3b08      	subs	r3, #8
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	430a      	orrs	r2, r1
 800084e:	3306      	adds	r3, #6
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	18c3      	adds	r3, r0, r3
 8000854:	3304      	adds	r3, #4
 8000856:	601a      	str	r2, [r3, #0]
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b003      	add	sp, #12
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <SysTick_Config+0x40>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d901      	bls.n	800087e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800087a:	2301      	movs	r3, #1
 800087c:	e010      	b.n	80008a0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <SysTick_Config+0x44>)
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	3a01      	subs	r2, #1
 8000884:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000886:	2301      	movs	r3, #1
 8000888:	425b      	negs	r3, r3
 800088a:	2103      	movs	r1, #3
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff ff7d 	bl	800078c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <SysTick_Config+0x44>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <SysTick_Config+0x44>)
 800089a:	2207      	movs	r2, #7
 800089c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800089e:	2300      	movs	r3, #0
}
 80008a0:	0018      	movs	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b002      	add	sp, #8
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	00ffffff 	.word	0x00ffffff
 80008ac:	e000e010 	.word	0xe000e010

080008b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	210f      	movs	r1, #15
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	1c02      	adds	r2, r0, #0
 80008c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b25b      	sxtb	r3, r3
 80008ca:	0011      	movs	r1, r2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff ff5d 	bl	800078c <__NVIC_SetPriority>
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b004      	add	sp, #16
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	0018      	movs	r0, r3
 80008e6:	f7ff ffbf 	bl	8000868 <SysTick_Config>
 80008ea:	0003      	movs	r3, r0
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b002      	add	sp, #8
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000902:	e149      	b.n	8000b98 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2101      	movs	r1, #1
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	4091      	lsls	r1, r2
 800090e:	000a      	movs	r2, r1
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <HAL_GPIO_Init+0x28>
 800091a:	e13a      	b.n	8000b92 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d003      	beq.n	800092c <HAL_GPIO_Init+0x38>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2b12      	cmp	r3, #18
 800092a:	d123      	bne.n	8000974 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	08da      	lsrs	r2, r3, #3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3208      	adds	r2, #8
 8000934:	0092      	lsls	r2, r2, #2
 8000936:	58d3      	ldr	r3, [r2, r3]
 8000938:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	2207      	movs	r2, #7
 800093e:	4013      	ands	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	220f      	movs	r2, #15
 8000944:	409a      	lsls	r2, r3
 8000946:	0013      	movs	r3, r2
 8000948:	43da      	mvns	r2, r3
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	4013      	ands	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	691a      	ldr	r2, [r3, #16]
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	2107      	movs	r1, #7
 8000958:	400b      	ands	r3, r1
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	409a      	lsls	r2, r3
 800095e:	0013      	movs	r3, r2
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4313      	orrs	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	08da      	lsrs	r2, r3, #3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3208      	adds	r2, #8
 800096e:	0092      	lsls	r2, r2, #2
 8000970:	6939      	ldr	r1, [r7, #16]
 8000972:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2203      	movs	r2, #3
 8000980:	409a      	lsls	r2, r3
 8000982:	0013      	movs	r3, r2
 8000984:	43da      	mvns	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	4013      	ands	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2203      	movs	r2, #3
 8000992:	401a      	ands	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	409a      	lsls	r2, r3
 800099a:	0013      	movs	r3, r2
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d00b      	beq.n	80009c8 <HAL_GPIO_Init+0xd4>
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d007      	beq.n	80009c8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009bc:	2b11      	cmp	r3, #17
 80009be:	d003      	beq.n	80009c8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	2b12      	cmp	r3, #18
 80009c6:	d130      	bne.n	8000a2a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	2203      	movs	r2, #3
 80009d4:	409a      	lsls	r2, r3
 80009d6:	0013      	movs	r3, r2
 80009d8:	43da      	mvns	r2, r3
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	4013      	ands	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	409a      	lsls	r2, r3
 80009ea:	0013      	movs	r3, r2
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009fe:	2201      	movs	r2, #1
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
 8000a04:	0013      	movs	r3, r2
 8000a06:	43da      	mvns	r2, r3
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	091b      	lsrs	r3, r3, #4
 8000a14:	2201      	movs	r2, #1
 8000a16:	401a      	ands	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	0013      	movs	r3, r2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	2203      	movs	r2, #3
 8000a36:	409a      	lsls	r2, r3
 8000a38:	0013      	movs	r3, r2
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	409a      	lsls	r2, r3
 8000a4c:	0013      	movs	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	055b      	lsls	r3, r3, #21
 8000a62:	4013      	ands	r3, r2
 8000a64:	d100      	bne.n	8000a68 <HAL_GPIO_Init+0x174>
 8000a66:	e094      	b.n	8000b92 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a68:	4b51      	ldr	r3, [pc, #324]	; (8000bb0 <HAL_GPIO_Init+0x2bc>)
 8000a6a:	699a      	ldr	r2, [r3, #24]
 8000a6c:	4b50      	ldr	r3, [pc, #320]	; (8000bb0 <HAL_GPIO_Init+0x2bc>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	430a      	orrs	r2, r1
 8000a72:	619a      	str	r2, [r3, #24]
 8000a74:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <HAL_GPIO_Init+0x2bc>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a80:	4a4c      	ldr	r2, [pc, #304]	; (8000bb4 <HAL_GPIO_Init+0x2c0>)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	089b      	lsrs	r3, r3, #2
 8000a86:	3302      	adds	r3, #2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	589b      	ldr	r3, [r3, r2]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	2203      	movs	r2, #3
 8000a92:	4013      	ands	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	220f      	movs	r2, #15
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	43da      	mvns	r2, r3
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	2390      	movs	r3, #144	; 0x90
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d00d      	beq.n	8000aca <HAL_GPIO_Init+0x1d6>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a41      	ldr	r2, [pc, #260]	; (8000bb8 <HAL_GPIO_Init+0x2c4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d007      	beq.n	8000ac6 <HAL_GPIO_Init+0x1d2>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a40      	ldr	r2, [pc, #256]	; (8000bbc <HAL_GPIO_Init+0x2c8>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d101      	bne.n	8000ac2 <HAL_GPIO_Init+0x1ce>
 8000abe:	2302      	movs	r3, #2
 8000ac0:	e004      	b.n	8000acc <HAL_GPIO_Init+0x1d8>
 8000ac2:	2305      	movs	r3, #5
 8000ac4:	e002      	b.n	8000acc <HAL_GPIO_Init+0x1d8>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <HAL_GPIO_Init+0x1d8>
 8000aca:	2300      	movs	r3, #0
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	2103      	movs	r1, #3
 8000ad0:	400a      	ands	r2, r1
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4093      	lsls	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000adc:	4935      	ldr	r1, [pc, #212]	; (8000bb4 <HAL_GPIO_Init+0x2c0>)
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aea:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <HAL_GPIO_Init+0x2cc>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	43da      	mvns	r2, r3
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	025b      	lsls	r3, r3, #9
 8000b02:	4013      	ands	r3, r2
 8000b04:	d003      	beq.n	8000b0e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b0e:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <HAL_GPIO_Init+0x2cc>)
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b14:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <HAL_GPIO_Init+0x2cc>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	43da      	mvns	r2, r3
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	029b      	lsls	r3, r3, #10
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	d003      	beq.n	8000b38 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <HAL_GPIO_Init+0x2cc>)
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <HAL_GPIO_Init+0x2cc>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	43da      	mvns	r2, r3
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	035b      	lsls	r3, r3, #13
 8000b56:	4013      	ands	r3, r2
 8000b58:	d003      	beq.n	8000b62 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <HAL_GPIO_Init+0x2cc>)
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_GPIO_Init+0x2cc>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43da      	mvns	r2, r3
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	039b      	lsls	r3, r3, #14
 8000b80:	4013      	ands	r3, r2
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_GPIO_Init+0x2cc>)
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	40da      	lsrs	r2, r3
 8000ba0:	1e13      	subs	r3, r2, #0
 8000ba2:	d000      	beq.n	8000ba6 <HAL_GPIO_Init+0x2b2>
 8000ba4:	e6ae      	b.n	8000904 <HAL_GPIO_Init+0x10>
  } 
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b006      	add	sp, #24
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40010000 	.word	0x40010000
 8000bb8:	48000400 	.word	0x48000400
 8000bbc:	48000800 	.word	0x48000800
 8000bc0:	40010400 	.word	0x40010400

08000bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	0008      	movs	r0, r1
 8000bce:	0011      	movs	r1, r2
 8000bd0:	1cbb      	adds	r3, r7, #2
 8000bd2:	1c02      	adds	r2, r0, #0
 8000bd4:	801a      	strh	r2, [r3, #0]
 8000bd6:	1c7b      	adds	r3, r7, #1
 8000bd8:	1c0a      	adds	r2, r1, #0
 8000bda:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bdc:	1c7b      	adds	r3, r7, #1
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d004      	beq.n	8000bee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000be4:	1cbb      	adds	r3, r7, #2
 8000be6:	881a      	ldrh	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bec:	e003      	b.n	8000bf6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bee:	1cbb      	adds	r3, r7, #2
 8000bf0:	881a      	ldrh	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	000a      	movs	r2, r1
 8000c08:	1cbb      	adds	r3, r7, #2
 8000c0a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	1cba      	adds	r2, r7, #2
 8000c12:	8812      	ldrh	r2, [r2, #0]
 8000c14:	4013      	ands	r3, r2
 8000c16:	d005      	beq.n	8000c24 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c18:	1cbb      	adds	r3, r7, #2
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	041a      	lsls	r2, r3, #16
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000c22:	e003      	b.n	8000c2c <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c24:	1cbb      	adds	r3, r7, #2
 8000c26:	881a      	ldrh	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	619a      	str	r2, [r3, #24]
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b002      	add	sp, #8
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e303      	b.n	800124e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	d100      	bne.n	8000c52 <HAL_RCC_OscConfig+0x1e>
 8000c50:	e08d      	b.n	8000d6e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c52:	4bc4      	ldr	r3, [pc, #784]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	220c      	movs	r2, #12
 8000c58:	4013      	ands	r3, r2
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d00e      	beq.n	8000c7c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c5e:	4bc1      	ldr	r3, [pc, #772]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	220c      	movs	r2, #12
 8000c64:	4013      	ands	r3, r2
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	d116      	bne.n	8000c98 <HAL_RCC_OscConfig+0x64>
 8000c6a:	4bbe      	ldr	r3, [pc, #760]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	025b      	lsls	r3, r3, #9
 8000c72:	401a      	ands	r2, r3
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	025b      	lsls	r3, r3, #9
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d10d      	bne.n	8000c98 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7c:	4bb9      	ldr	r3, [pc, #740]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	029b      	lsls	r3, r3, #10
 8000c84:	4013      	ands	r3, r2
 8000c86:	d100      	bne.n	8000c8a <HAL_RCC_OscConfig+0x56>
 8000c88:	e070      	b.n	8000d6c <HAL_RCC_OscConfig+0x138>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d000      	beq.n	8000c94 <HAL_RCC_OscConfig+0x60>
 8000c92:	e06b      	b.n	8000d6c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e2da      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d107      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x7c>
 8000ca0:	4bb0      	ldr	r3, [pc, #704]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4baf      	ldr	r3, [pc, #700]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	0249      	lsls	r1, r1, #9
 8000caa:	430a      	orrs	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e02f      	b.n	8000d10 <HAL_RCC_OscConfig+0xdc>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10c      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x9e>
 8000cb8:	4baa      	ldr	r3, [pc, #680]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4ba9      	ldr	r3, [pc, #676]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000cbe:	49aa      	ldr	r1, [pc, #680]	; (8000f68 <HAL_RCC_OscConfig+0x334>)
 8000cc0:	400a      	ands	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	4ba7      	ldr	r3, [pc, #668]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4ba6      	ldr	r3, [pc, #664]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000cca:	49a8      	ldr	r1, [pc, #672]	; (8000f6c <HAL_RCC_OscConfig+0x338>)
 8000ccc:	400a      	ands	r2, r1
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	e01e      	b.n	8000d10 <HAL_RCC_OscConfig+0xdc>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	d10e      	bne.n	8000cf8 <HAL_RCC_OscConfig+0xc4>
 8000cda:	4ba2      	ldr	r3, [pc, #648]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4ba1      	ldr	r3, [pc, #644]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	02c9      	lsls	r1, r1, #11
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	4b9e      	ldr	r3, [pc, #632]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b9d      	ldr	r3, [pc, #628]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	e00b      	b.n	8000d10 <HAL_RCC_OscConfig+0xdc>
 8000cf8:	4b9a      	ldr	r3, [pc, #616]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b99      	ldr	r3, [pc, #612]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000cfe:	499a      	ldr	r1, [pc, #616]	; (8000f68 <HAL_RCC_OscConfig+0x334>)
 8000d00:	400a      	ands	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	4b97      	ldr	r3, [pc, #604]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b96      	ldr	r3, [pc, #600]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000d0a:	4998      	ldr	r1, [pc, #608]	; (8000f6c <HAL_RCC_OscConfig+0x338>)
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d014      	beq.n	8000d42 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d18:	f7ff fd0c 	bl	8000734 <HAL_GetTick>
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d20:	e008      	b.n	8000d34 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d22:	f7ff fd07 	bl	8000734 <HAL_GetTick>
 8000d26:	0002      	movs	r2, r0
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b64      	cmp	r3, #100	; 0x64
 8000d2e:	d901      	bls.n	8000d34 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e28c      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d34:	4b8b      	ldr	r3, [pc, #556]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	029b      	lsls	r3, r3, #10
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d0f0      	beq.n	8000d22 <HAL_RCC_OscConfig+0xee>
 8000d40:	e015      	b.n	8000d6e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d42:	f7ff fcf7 	bl	8000734 <HAL_GetTick>
 8000d46:	0003      	movs	r3, r0
 8000d48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fcf2 	bl	8000734 <HAL_GetTick>
 8000d50:	0002      	movs	r2, r0
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b64      	cmp	r3, #100	; 0x64
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e277      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5e:	4b81      	ldr	r3, [pc, #516]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	029b      	lsls	r3, r3, #10
 8000d66:	4013      	ands	r3, r2
 8000d68:	d1f0      	bne.n	8000d4c <HAL_RCC_OscConfig+0x118>
 8000d6a:	e000      	b.n	8000d6e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2202      	movs	r2, #2
 8000d74:	4013      	ands	r3, r2
 8000d76:	d100      	bne.n	8000d7a <HAL_RCC_OscConfig+0x146>
 8000d78:	e069      	b.n	8000e4e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d7a:	4b7a      	ldr	r3, [pc, #488]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	220c      	movs	r2, #12
 8000d80:	4013      	ands	r3, r2
 8000d82:	d00b      	beq.n	8000d9c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d84:	4b77      	ldr	r3, [pc, #476]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	220c      	movs	r2, #12
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d11c      	bne.n	8000dca <HAL_RCC_OscConfig+0x196>
 8000d90:	4b74      	ldr	r3, [pc, #464]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	025b      	lsls	r3, r3, #9
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d116      	bne.n	8000dca <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9c:	4b71      	ldr	r3, [pc, #452]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2202      	movs	r2, #2
 8000da2:	4013      	ands	r3, r2
 8000da4:	d005      	beq.n	8000db2 <HAL_RCC_OscConfig+0x17e>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d001      	beq.n	8000db2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e24d      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db2:	4b6c      	ldr	r3, [pc, #432]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	22f8      	movs	r2, #248	; 0xf8
 8000db8:	4393      	bics	r3, r2
 8000dba:	0019      	movs	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	00da      	lsls	r2, r3, #3
 8000dc2:	4b68      	ldr	r3, [pc, #416]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc8:	e041      	b.n	8000e4e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d024      	beq.n	8000e1c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dd2:	4b64      	ldr	r3, [pc, #400]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4b63      	ldr	r3, [pc, #396]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000dd8:	2101      	movs	r1, #1
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dde:	f7ff fca9 	bl	8000734 <HAL_GetTick>
 8000de2:	0003      	movs	r3, r0
 8000de4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de8:	f7ff fca4 	bl	8000734 <HAL_GetTick>
 8000dec:	0002      	movs	r2, r0
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e229      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfa:	4b5a      	ldr	r3, [pc, #360]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2202      	movs	r2, #2
 8000e00:	4013      	ands	r3, r2
 8000e02:	d0f1      	beq.n	8000de8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e04:	4b57      	ldr	r3, [pc, #348]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	22f8      	movs	r2, #248	; 0xf8
 8000e0a:	4393      	bics	r3, r2
 8000e0c:	0019      	movs	r1, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	00da      	lsls	r2, r3, #3
 8000e14:	4b53      	ldr	r3, [pc, #332]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000e16:	430a      	orrs	r2, r1
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e018      	b.n	8000e4e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e1c:	4b51      	ldr	r3, [pc, #324]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b50      	ldr	r3, [pc, #320]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000e22:	2101      	movs	r1, #1
 8000e24:	438a      	bics	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fc84 	bl	8000734 <HAL_GetTick>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e32:	f7ff fc7f 	bl	8000734 <HAL_GetTick>
 8000e36:	0002      	movs	r2, r0
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e204      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e44:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2202      	movs	r2, #2
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d1f1      	bne.n	8000e32 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2208      	movs	r2, #8
 8000e54:	4013      	ands	r3, r2
 8000e56:	d036      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69db      	ldr	r3, [r3, #28]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d019      	beq.n	8000e94 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e60:	4b40      	ldr	r3, [pc, #256]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e64:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6c:	f7ff fc62 	bl	8000734 <HAL_GetTick>
 8000e70:	0003      	movs	r3, r0
 8000e72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e76:	f7ff fc5d 	bl	8000734 <HAL_GetTick>
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e1e2      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e88:	4b36      	ldr	r3, [pc, #216]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d0f1      	beq.n	8000e76 <HAL_RCC_OscConfig+0x242>
 8000e92:	e018      	b.n	8000ec6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e94:	4b33      	ldr	r3, [pc, #204]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e98:	4b32      	ldr	r3, [pc, #200]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	438a      	bics	r2, r1
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea0:	f7ff fc48 	bl	8000734 <HAL_GetTick>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fc43 	bl	8000734 <HAL_GetTick>
 8000eae:	0002      	movs	r2, r0
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e1c8      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ebc:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d1f1      	bne.n	8000eaa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2204      	movs	r2, #4
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d100      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x29e>
 8000ed0:	e0b6      	b.n	8001040 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed2:	231f      	movs	r3, #31
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eda:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000edc:	69da      	ldr	r2, [r3, #28]
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	055b      	lsls	r3, r3, #21
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d111      	bne.n	8000f0a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000ee8:	69da      	ldr	r2, [r3, #28]
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	0549      	lsls	r1, r1, #21
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	61da      	str	r2, [r3, #28]
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000ef6:	69da      	ldr	r2, [r3, #28]
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	055b      	lsls	r3, r3, #21
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f02:	231f      	movs	r3, #31
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <HAL_RCC_OscConfig+0x33c>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4013      	ands	r3, r2
 8000f14:	d11a      	bne.n	8000f4c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_RCC_OscConfig+0x33c>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_RCC_OscConfig+0x33c>)
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	0049      	lsls	r1, r1, #1
 8000f20:	430a      	orrs	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f24:	f7ff fc06 	bl	8000734 <HAL_GetTick>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f2e:	f7ff fc01 	bl	8000734 <HAL_GetTick>
 8000f32:	0002      	movs	r2, r0
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b64      	cmp	r3, #100	; 0x64
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e186      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_RCC_OscConfig+0x33c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d0f0      	beq.n	8000f2e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d10f      	bne.n	8000f74 <HAL_RCC_OscConfig+0x340>
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000f56:	6a1a      	ldr	r2, [r3, #32]
 8000f58:	4b02      	ldr	r3, [pc, #8]	; (8000f64 <HAL_RCC_OscConfig+0x330>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	621a      	str	r2, [r3, #32]
 8000f60:	e036      	b.n	8000fd0 <HAL_RCC_OscConfig+0x39c>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	40021000 	.word	0x40021000
 8000f68:	fffeffff 	.word	0xfffeffff
 8000f6c:	fffbffff 	.word	0xfffbffff
 8000f70:	40007000 	.word	0x40007000
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10c      	bne.n	8000f96 <HAL_RCC_OscConfig+0x362>
 8000f7c:	4bb6      	ldr	r3, [pc, #728]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8000f7e:	6a1a      	ldr	r2, [r3, #32]
 8000f80:	4bb5      	ldr	r3, [pc, #724]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	438a      	bics	r2, r1
 8000f86:	621a      	str	r2, [r3, #32]
 8000f88:	4bb3      	ldr	r3, [pc, #716]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8000f8a:	6a1a      	ldr	r2, [r3, #32]
 8000f8c:	4bb2      	ldr	r3, [pc, #712]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8000f8e:	2104      	movs	r1, #4
 8000f90:	438a      	bics	r2, r1
 8000f92:	621a      	str	r2, [r3, #32]
 8000f94:	e01c      	b.n	8000fd0 <HAL_RCC_OscConfig+0x39c>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d10c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x384>
 8000f9e:	4bae      	ldr	r3, [pc, #696]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8000fa0:	6a1a      	ldr	r2, [r3, #32]
 8000fa2:	4bad      	ldr	r3, [pc, #692]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	621a      	str	r2, [r3, #32]
 8000faa:	4bab      	ldr	r3, [pc, #684]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8000fac:	6a1a      	ldr	r2, [r3, #32]
 8000fae:	4baa      	ldr	r3, [pc, #680]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	621a      	str	r2, [r3, #32]
 8000fb6:	e00b      	b.n	8000fd0 <HAL_RCC_OscConfig+0x39c>
 8000fb8:	4ba7      	ldr	r3, [pc, #668]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	4ba6      	ldr	r3, [pc, #664]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	438a      	bics	r2, r1
 8000fc2:	621a      	str	r2, [r3, #32]
 8000fc4:	4ba4      	ldr	r3, [pc, #656]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8000fc6:	6a1a      	ldr	r2, [r3, #32]
 8000fc8:	4ba3      	ldr	r3, [pc, #652]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8000fca:	2104      	movs	r1, #4
 8000fcc:	438a      	bics	r2, r1
 8000fce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d014      	beq.n	8001002 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd8:	f7ff fbac 	bl	8000734 <HAL_GetTick>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe0:	e009      	b.n	8000ff6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fba7 	bl	8000734 <HAL_GetTick>
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	4a9b      	ldr	r2, [pc, #620]	; (800125c <HAL_RCC_OscConfig+0x628>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e12b      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff6:	4b98      	ldr	r3, [pc, #608]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x3ae>
 8001000:	e013      	b.n	800102a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001002:	f7ff fb97 	bl	8000734 <HAL_GetTick>
 8001006:	0003      	movs	r3, r0
 8001008:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800100a:	e009      	b.n	8001020 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800100c:	f7ff fb92 	bl	8000734 <HAL_GetTick>
 8001010:	0002      	movs	r2, r0
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	4a91      	ldr	r2, [pc, #580]	; (800125c <HAL_RCC_OscConfig+0x628>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e116      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001020:	4b8d      	ldr	r3, [pc, #564]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	2202      	movs	r2, #2
 8001026:	4013      	ands	r3, r2
 8001028:	d1f0      	bne.n	800100c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800102a:	231f      	movs	r3, #31
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d105      	bne.n	8001040 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001034:	4b88      	ldr	r3, [pc, #544]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001036:	69da      	ldr	r2, [r3, #28]
 8001038:	4b87      	ldr	r3, [pc, #540]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 800103a:	4989      	ldr	r1, [pc, #548]	; (8001260 <HAL_RCC_OscConfig+0x62c>)
 800103c:	400a      	ands	r2, r1
 800103e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2210      	movs	r2, #16
 8001046:	4013      	ands	r3, r2
 8001048:	d063      	beq.n	8001112 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d12a      	bne.n	80010a8 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001052:	4b81      	ldr	r3, [pc, #516]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001056:	4b80      	ldr	r3, [pc, #512]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001058:	2104      	movs	r1, #4
 800105a:	430a      	orrs	r2, r1
 800105c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800105e:	4b7e      	ldr	r3, [pc, #504]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001062:	4b7d      	ldr	r3, [pc, #500]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001064:	2101      	movs	r1, #1
 8001066:	430a      	orrs	r2, r1
 8001068:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106a:	f7ff fb63 	bl	8000734 <HAL_GetTick>
 800106e:	0003      	movs	r3, r0
 8001070:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001074:	f7ff fb5e 	bl	8000734 <HAL_GetTick>
 8001078:	0002      	movs	r2, r0
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e0e3      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001086:	4b74      	ldr	r3, [pc, #464]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108a:	2202      	movs	r2, #2
 800108c:	4013      	ands	r3, r2
 800108e:	d0f1      	beq.n	8001074 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001090:	4b71      	ldr	r3, [pc, #452]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001094:	22f8      	movs	r2, #248	; 0xf8
 8001096:	4393      	bics	r3, r2
 8001098:	0019      	movs	r1, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	00da      	lsls	r2, r3, #3
 80010a0:	4b6d      	ldr	r3, [pc, #436]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 80010a2:	430a      	orrs	r2, r1
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
 80010a6:	e034      	b.n	8001112 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	3305      	adds	r3, #5
 80010ae:	d111      	bne.n	80010d4 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010b0:	4b69      	ldr	r3, [pc, #420]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 80010b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b4:	4b68      	ldr	r3, [pc, #416]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 80010b6:	2104      	movs	r1, #4
 80010b8:	438a      	bics	r2, r1
 80010ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010bc:	4b66      	ldr	r3, [pc, #408]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 80010be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c0:	22f8      	movs	r2, #248	; 0xf8
 80010c2:	4393      	bics	r3, r2
 80010c4:	0019      	movs	r1, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	00da      	lsls	r2, r3, #3
 80010cc:	4b62      	ldr	r3, [pc, #392]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 80010ce:	430a      	orrs	r2, r1
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34
 80010d2:	e01e      	b.n	8001112 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010d4:	4b60      	ldr	r3, [pc, #384]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 80010d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d8:	4b5f      	ldr	r3, [pc, #380]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 80010da:	2104      	movs	r1, #4
 80010dc:	430a      	orrs	r2, r1
 80010de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010e0:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 80010e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e4:	4b5c      	ldr	r3, [pc, #368]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 80010e6:	2101      	movs	r1, #1
 80010e8:	438a      	bics	r2, r1
 80010ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ec:	f7ff fb22 	bl	8000734 <HAL_GetTick>
 80010f0:	0003      	movs	r3, r0
 80010f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010f6:	f7ff fb1d 	bl	8000734 <HAL_GetTick>
 80010fa:	0002      	movs	r2, r0
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e0a2      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001108:	4b53      	ldr	r3, [pc, #332]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 800110a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110c:	2202      	movs	r2, #2
 800110e:	4013      	ands	r3, r2
 8001110:	d1f1      	bne.n	80010f6 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d100      	bne.n	800111c <HAL_RCC_OscConfig+0x4e8>
 800111a:	e097      	b.n	800124c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800111c:	4b4e      	ldr	r3, [pc, #312]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	220c      	movs	r2, #12
 8001122:	4013      	ands	r3, r2
 8001124:	2b08      	cmp	r3, #8
 8001126:	d100      	bne.n	800112a <HAL_RCC_OscConfig+0x4f6>
 8001128:	e06b      	b.n	8001202 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d14c      	bne.n	80011cc <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001132:	4b49      	ldr	r3, [pc, #292]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b48      	ldr	r3, [pc, #288]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001138:	494a      	ldr	r1, [pc, #296]	; (8001264 <HAL_RCC_OscConfig+0x630>)
 800113a:	400a      	ands	r2, r1
 800113c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113e:	f7ff faf9 	bl	8000734 <HAL_GetTick>
 8001142:	0003      	movs	r3, r0
 8001144:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001148:	f7ff faf4 	bl	8000734 <HAL_GetTick>
 800114c:	0002      	movs	r2, r0
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e079      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115a:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	049b      	lsls	r3, r3, #18
 8001162:	4013      	ands	r3, r2
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001166:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	220f      	movs	r2, #15
 800116c:	4393      	bics	r3, r2
 800116e:	0019      	movs	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001174:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001176:	430a      	orrs	r2, r1
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a3a      	ldr	r2, [pc, #232]	; (8001268 <HAL_RCC_OscConfig+0x634>)
 8001180:	4013      	ands	r3, r2
 8001182:	0019      	movs	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	431a      	orrs	r2, r3
 800118e:	4b32      	ldr	r3, [pc, #200]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001190:	430a      	orrs	r2, r1
 8001192:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	0449      	lsls	r1, r1, #17
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fac7 	bl	8000734 <HAL_GetTick>
 80011a6:	0003      	movs	r3, r0
 80011a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ac:	f7ff fac2 	bl	8000734 <HAL_GetTick>
 80011b0:	0002      	movs	r2, r0
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e047      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	049b      	lsls	r3, r3, #18
 80011c6:	4013      	ands	r3, r2
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0x578>
 80011ca:	e03f      	b.n	800124c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b21      	ldr	r3, [pc, #132]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 80011d2:	4924      	ldr	r1, [pc, #144]	; (8001264 <HAL_RCC_OscConfig+0x630>)
 80011d4:	400a      	ands	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff faac 	bl	8000734 <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011e2:	f7ff faa7 	bl	8000734 <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e02c      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	049b      	lsls	r3, r3, #18
 80011fc:	4013      	ands	r3, r2
 80011fe:	d1f0      	bne.n	80011e2 <HAL_RCC_OscConfig+0x5ae>
 8001200:	e024      	b.n	800124c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e01f      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_RCC_OscConfig+0x624>)
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	025b      	lsls	r3, r3, #9
 8001220:	401a      	ands	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	429a      	cmp	r2, r3
 8001228:	d10e      	bne.n	8001248 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	220f      	movs	r2, #15
 800122e:	401a      	ands	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001234:	429a      	cmp	r2, r3
 8001236:	d107      	bne.n	8001248 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	23f0      	movs	r3, #240	; 0xf0
 800123c:	039b      	lsls	r3, r3, #14
 800123e:	401a      	ands	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	0018      	movs	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	b008      	add	sp, #32
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	40021000 	.word	0x40021000
 800125c:	00001388 	.word	0x00001388
 8001260:	efffffff 	.word	0xefffffff
 8001264:	feffffff 	.word	0xfeffffff
 8001268:	ffc2ffff 	.word	0xffc2ffff

0800126c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e0b3      	b.n	80013e8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001280:	4b5b      	ldr	r3, [pc, #364]	; (80013f0 <HAL_RCC_ClockConfig+0x184>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2201      	movs	r2, #1
 8001286:	4013      	ands	r3, r2
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d911      	bls.n	80012b2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	4b58      	ldr	r3, [pc, #352]	; (80013f0 <HAL_RCC_ClockConfig+0x184>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2201      	movs	r2, #1
 8001294:	4393      	bics	r3, r2
 8001296:	0019      	movs	r1, r3
 8001298:	4b55      	ldr	r3, [pc, #340]	; (80013f0 <HAL_RCC_ClockConfig+0x184>)
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a0:	4b53      	ldr	r3, [pc, #332]	; (80013f0 <HAL_RCC_ClockConfig+0x184>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4013      	ands	r3, r2
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d001      	beq.n	80012b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e09a      	b.n	80013e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2202      	movs	r2, #2
 80012b8:	4013      	ands	r3, r2
 80012ba:	d015      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2204      	movs	r2, #4
 80012c2:	4013      	ands	r3, r2
 80012c4:	d006      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012c6:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <HAL_RCC_ClockConfig+0x188>)
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <HAL_RCC_ClockConfig+0x188>)
 80012cc:	21e0      	movs	r1, #224	; 0xe0
 80012ce:	00c9      	lsls	r1, r1, #3
 80012d0:	430a      	orrs	r2, r1
 80012d2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d4:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <HAL_RCC_ClockConfig+0x188>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	22f0      	movs	r2, #240	; 0xf0
 80012da:	4393      	bics	r3, r2
 80012dc:	0019      	movs	r1, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <HAL_RCC_ClockConfig+0x188>)
 80012e4:	430a      	orrs	r2, r1
 80012e6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	d040      	beq.n	8001374 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b3e      	ldr	r3, [pc, #248]	; (80013f4 <HAL_RCC_ClockConfig+0x188>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	029b      	lsls	r3, r3, #10
 8001302:	4013      	ands	r3, r2
 8001304:	d114      	bne.n	8001330 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e06e      	b.n	80013e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <HAL_RCC_ClockConfig+0x188>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	049b      	lsls	r3, r3, #18
 800131a:	4013      	ands	r3, r2
 800131c:	d108      	bne.n	8001330 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e062      	b.n	80013e8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <HAL_RCC_ClockConfig+0x188>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2202      	movs	r2, #2
 8001328:	4013      	ands	r3, r2
 800132a:	d101      	bne.n	8001330 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e05b      	b.n	80013e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001330:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <HAL_RCC_ClockConfig+0x188>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2203      	movs	r2, #3
 8001336:	4393      	bics	r3, r2
 8001338:	0019      	movs	r1, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_RCC_ClockConfig+0x188>)
 8001340:	430a      	orrs	r2, r1
 8001342:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001344:	f7ff f9f6 	bl	8000734 <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134c:	e009      	b.n	8001362 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134e:	f7ff f9f1 	bl	8000734 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	4a27      	ldr	r2, [pc, #156]	; (80013f8 <HAL_RCC_ClockConfig+0x18c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e042      	b.n	80013e8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_RCC_ClockConfig+0x188>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	220c      	movs	r2, #12
 8001368:	401a      	ands	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	429a      	cmp	r2, r3
 8001372:	d1ec      	bne.n	800134e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <HAL_RCC_ClockConfig+0x184>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2201      	movs	r2, #1
 800137a:	4013      	ands	r3, r2
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d211      	bcs.n	80013a6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_RCC_ClockConfig+0x184>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2201      	movs	r2, #1
 8001388:	4393      	bics	r3, r2
 800138a:	0019      	movs	r1, r3
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_RCC_ClockConfig+0x184>)
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_RCC_ClockConfig+0x184>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2201      	movs	r2, #1
 800139a:	4013      	ands	r3, r2
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d001      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e020      	b.n	80013e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2204      	movs	r2, #4
 80013ac:	4013      	ands	r3, r2
 80013ae:	d009      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_RCC_ClockConfig+0x188>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a11      	ldr	r2, [pc, #68]	; (80013fc <HAL_RCC_ClockConfig+0x190>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	0019      	movs	r1, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_RCC_ClockConfig+0x188>)
 80013c0:	430a      	orrs	r2, r1
 80013c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013c4:	f000 f820 	bl	8001408 <HAL_RCC_GetSysClockFreq>
 80013c8:	0001      	movs	r1, r0
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_RCC_ClockConfig+0x188>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	220f      	movs	r2, #15
 80013d2:	4013      	ands	r3, r2
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_RCC_ClockConfig+0x194>)
 80013d6:	5cd3      	ldrb	r3, [r2, r3]
 80013d8:	000a      	movs	r2, r1
 80013da:	40da      	lsrs	r2, r3
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_RCC_ClockConfig+0x198>)
 80013de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff f961 	bl	80006a8 <HAL_InitTick>
  
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b004      	add	sp, #16
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40022000 	.word	0x40022000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	00001388 	.word	0x00001388
 80013fc:	fffff8ff 	.word	0xfffff8ff
 8001400:	08001d58 	.word	0x08001d58
 8001404:	20000000 	.word	0x20000000

08001408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b08f      	sub	sp, #60	; 0x3c
 800140c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800140e:	2314      	movs	r3, #20
 8001410:	18fb      	adds	r3, r7, r3
 8001412:	4a2b      	ldr	r2, [pc, #172]	; (80014c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001414:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001416:	c313      	stmia	r3!, {r0, r1, r4}
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	4a29      	ldr	r2, [pc, #164]	; (80014c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001420:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001422:	c313      	stmia	r3!, {r0, r1, r4}
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001430:	2300      	movs	r3, #0
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001444:	220c      	movs	r2, #12
 8001446:	4013      	ands	r3, r2
 8001448:	2b04      	cmp	r3, #4
 800144a:	d002      	beq.n	8001452 <HAL_RCC_GetSysClockFreq+0x4a>
 800144c:	2b08      	cmp	r3, #8
 800144e:	d003      	beq.n	8001458 <HAL_RCC_GetSysClockFreq+0x50>
 8001450:	e02d      	b.n	80014ae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001456:	e02d      	b.n	80014b4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145a:	0c9b      	lsrs	r3, r3, #18
 800145c:	220f      	movs	r2, #15
 800145e:	4013      	ands	r3, r2
 8001460:	2214      	movs	r2, #20
 8001462:	18ba      	adds	r2, r7, r2
 8001464:	5cd3      	ldrb	r3, [r2, r3]
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	220f      	movs	r2, #15
 800146e:	4013      	ands	r3, r2
 8001470:	1d3a      	adds	r2, r7, #4
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	025b      	lsls	r3, r3, #9
 800147c:	4013      	ands	r3, r2
 800147e:	d009      	beq.n	8001494 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001482:	4812      	ldr	r0, [pc, #72]	; (80014cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001484:	f7fe fe40 	bl	8000108 <__udivsi3>
 8001488:	0003      	movs	r3, r0
 800148a:	001a      	movs	r2, r3
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	4353      	muls	r3, r2
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
 8001492:	e009      	b.n	80014a8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001496:	000a      	movs	r2, r1
 8001498:	0152      	lsls	r2, r2, #5
 800149a:	1a52      	subs	r2, r2, r1
 800149c:	0193      	lsls	r3, r2, #6
 800149e:	1a9b      	subs	r3, r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	185b      	adds	r3, r3, r1
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80014a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014ac:	e002      	b.n	80014b4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014b2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80014b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b00f      	add	sp, #60	; 0x3c
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	08001d38 	.word	0x08001d38
 80014c4:	08001d48 	.word	0x08001d48
 80014c8:	40021000 	.word	0x40021000
 80014cc:	007a1200 	.word	0x007a1200

080014d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e01e      	b.n	8001520 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	223d      	movs	r2, #61	; 0x3d
 80014e6:	5c9b      	ldrb	r3, [r3, r2]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d107      	bne.n	80014fe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	223c      	movs	r2, #60	; 0x3c
 80014f2:	2100      	movs	r1, #0
 80014f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	0018      	movs	r0, r3
 80014fa:	f7fe fff7 	bl	80004ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	223d      	movs	r2, #61	; 0x3d
 8001502:	2102      	movs	r1, #2
 8001504:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3304      	adds	r3, #4
 800150e:	0019      	movs	r1, r3
 8001510:	0010      	movs	r0, r2
 8001512:	f000 f907 	bl	8001724 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	223d      	movs	r2, #61	; 0x3d
 800151a:	2101      	movs	r1, #1
 800151c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	0018      	movs	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	b002      	add	sp, #8
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6839      	ldr	r1, [r7, #0]
 8001538:	2201      	movs	r2, #1
 800153a:	0018      	movs	r0, r3
 800153c:	f000 fb48 	bl	8001bd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <HAL_TIM_PWM_Start+0x80>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d009      	beq.n	800155e <HAL_TIM_PWM_Start+0x36>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a17      	ldr	r2, [pc, #92]	; (80015ac <HAL_TIM_PWM_Start+0x84>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d004      	beq.n	800155e <HAL_TIM_PWM_Start+0x36>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <HAL_TIM_PWM_Start+0x88>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_TIM_PWM_Start+0x3a>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_TIM_PWM_Start+0x3c>
 8001562:	2300      	movs	r3, #0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	0209      	lsls	r1, r1, #8
 8001576:	430a      	orrs	r2, r1
 8001578:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2207      	movs	r2, #7
 8001582:	4013      	ands	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b06      	cmp	r3, #6
 800158a:	d007      	beq.n	800159c <HAL_TIM_PWM_Start+0x74>
  {
    __HAL_TIM_ENABLE(htim);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2101      	movs	r1, #1
 8001598:	430a      	orrs	r2, r1
 800159a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	0018      	movs	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b004      	add	sp, #16
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	40012c00 	.word	0x40012c00
 80015ac:	40014400 	.word	0x40014400
 80015b0:	40014800 	.word	0x40014800

080015b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	223c      	movs	r2, #60	; 0x3c
 80015c4:	5c9b      	ldrb	r3, [r3, r2]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e0a4      	b.n	8001718 <HAL_TIM_PWM_ConfigChannel+0x164>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	223c      	movs	r2, #60	; 0x3c
 80015d2:	2101      	movs	r1, #1
 80015d4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	223d      	movs	r2, #61	; 0x3d
 80015da:	2102      	movs	r1, #2
 80015dc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d029      	beq.n	8001638 <HAL_TIM_PWM_ConfigChannel+0x84>
 80015e4:	d802      	bhi.n	80015ec <HAL_TIM_PWM_ConfigChannel+0x38>
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80015ea:	e08c      	b.n	8001706 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d046      	beq.n	800167e <HAL_TIM_PWM_ConfigChannel+0xca>
 80015f0:	2b0c      	cmp	r3, #12
 80015f2:	d065      	beq.n	80016c0 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 80015f4:	e087      	b.n	8001706 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	0011      	movs	r1, r2
 80015fe:	0018      	movs	r0, r3
 8001600:	f000 f906 	bl	8001810 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699a      	ldr	r2, [r3, #24]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2108      	movs	r1, #8
 8001610:	430a      	orrs	r2, r1
 8001612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699a      	ldr	r2, [r3, #24]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2104      	movs	r1, #4
 8001620:	438a      	bics	r2, r1
 8001622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6999      	ldr	r1, [r3, #24]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	619a      	str	r2, [r3, #24]
      break;
 8001636:	e066      	b.n	8001706 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	0011      	movs	r1, r2
 8001640:	0018      	movs	r0, r3
 8001642:	f000 f963 	bl	800190c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	699a      	ldr	r2, [r3, #24]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	0109      	lsls	r1, r1, #4
 8001654:	430a      	orrs	r2, r1
 8001656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	699a      	ldr	r2, [r3, #24]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	492f      	ldr	r1, [pc, #188]	; (8001720 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001664:	400a      	ands	r2, r1
 8001666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6999      	ldr	r1, [r3, #24]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	021a      	lsls	r2, r3, #8
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	619a      	str	r2, [r3, #24]
      break;
 800167c:	e043      	b.n	8001706 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	0011      	movs	r1, r2
 8001686:	0018      	movs	r0, r3
 8001688:	f000 f9be 	bl	8001a08 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	69da      	ldr	r2, [r3, #28]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2108      	movs	r1, #8
 8001698:	430a      	orrs	r2, r1
 800169a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	69da      	ldr	r2, [r3, #28]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2104      	movs	r1, #4
 80016a8:	438a      	bics	r2, r1
 80016aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	69d9      	ldr	r1, [r3, #28]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	61da      	str	r2, [r3, #28]
      break;
 80016be:	e022      	b.n	8001706 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	0011      	movs	r1, r2
 80016c8:	0018      	movs	r0, r3
 80016ca:	f000 fa1d 	bl	8001b08 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	69da      	ldr	r2, [r3, #28]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	0109      	lsls	r1, r1, #4
 80016dc:	430a      	orrs	r2, r1
 80016de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	69da      	ldr	r2, [r3, #28]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	490d      	ldr	r1, [pc, #52]	; (8001720 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80016ec:	400a      	ands	r2, r1
 80016ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	69d9      	ldr	r1, [r3, #28]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	021a      	lsls	r2, r3, #8
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	61da      	str	r2, [r3, #28]
      break;
 8001704:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	223d      	movs	r2, #61	; 0x3d
 800170a:	2101      	movs	r1, #1
 800170c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	223c      	movs	r2, #60	; 0x3c
 8001712:	2100      	movs	r1, #0
 8001714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b004      	add	sp, #16
 800171e:	bd80      	pop	{r7, pc}
 8001720:	fffffbff 	.word	0xfffffbff

08001724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a30      	ldr	r2, [pc, #192]	; (80017f8 <TIM_Base_SetConfig+0xd4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d008      	beq.n	800174e <TIM_Base_SetConfig+0x2a>
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	05db      	lsls	r3, r3, #23
 8001742:	429a      	cmp	r2, r3
 8001744:	d003      	beq.n	800174e <TIM_Base_SetConfig+0x2a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a2c      	ldr	r2, [pc, #176]	; (80017fc <TIM_Base_SetConfig+0xd8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d108      	bne.n	8001760 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2270      	movs	r2, #112	; 0x70
 8001752:	4393      	bics	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a25      	ldr	r2, [pc, #148]	; (80017f8 <TIM_Base_SetConfig+0xd4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d014      	beq.n	8001792 <TIM_Base_SetConfig+0x6e>
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	05db      	lsls	r3, r3, #23
 800176e:	429a      	cmp	r2, r3
 8001770:	d00f      	beq.n	8001792 <TIM_Base_SetConfig+0x6e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a21      	ldr	r2, [pc, #132]	; (80017fc <TIM_Base_SetConfig+0xd8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00b      	beq.n	8001792 <TIM_Base_SetConfig+0x6e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a20      	ldr	r2, [pc, #128]	; (8001800 <TIM_Base_SetConfig+0xdc>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d007      	beq.n	8001792 <TIM_Base_SetConfig+0x6e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a1f      	ldr	r2, [pc, #124]	; (8001804 <TIM_Base_SetConfig+0xe0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d003      	beq.n	8001792 <TIM_Base_SetConfig+0x6e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a1e      	ldr	r2, [pc, #120]	; (8001808 <TIM_Base_SetConfig+0xe4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d108      	bne.n	80017a4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4a1d      	ldr	r2, [pc, #116]	; (800180c <TIM_Base_SetConfig+0xe8>)
 8001796:	4013      	ands	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	4393      	bics	r3, r2
 80017aa:	001a      	movs	r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <TIM_Base_SetConfig+0xd4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d007      	beq.n	80017e2 <TIM_Base_SetConfig+0xbe>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <TIM_Base_SetConfig+0xe0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d003      	beq.n	80017e2 <TIM_Base_SetConfig+0xbe>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <TIM_Base_SetConfig+0xe4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d103      	bne.n	80017ea <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	615a      	str	r2, [r3, #20]
}
 80017f0:	46c0      	nop			; (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b004      	add	sp, #16
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40012c00 	.word	0x40012c00
 80017fc:	40000400 	.word	0x40000400
 8001800:	40002000 	.word	0x40002000
 8001804:	40014400 	.word	0x40014400
 8001808:	40014800 	.word	0x40014800
 800180c:	fffffcff 	.word	0xfffffcff

08001810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	2201      	movs	r2, #1
 8001820:	4393      	bics	r3, r2
 8001822:	001a      	movs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2270      	movs	r2, #112	; 0x70
 800183e:	4393      	bics	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2203      	movs	r2, #3
 8001846:	4393      	bics	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2202      	movs	r2, #2
 8001858:	4393      	bics	r3, r2
 800185a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a23      	ldr	r2, [pc, #140]	; (80018f8 <TIM_OC1_SetConfig+0xe8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <TIM_OC1_SetConfig+0x6e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a22      	ldr	r2, [pc, #136]	; (80018fc <TIM_OC1_SetConfig+0xec>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d003      	beq.n	800187e <TIM_OC1_SetConfig+0x6e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a21      	ldr	r2, [pc, #132]	; (8001900 <TIM_OC1_SetConfig+0xf0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10c      	bne.n	8001898 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2208      	movs	r2, #8
 8001882:	4393      	bics	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4313      	orrs	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2204      	movs	r2, #4
 8001894:	4393      	bics	r3, r2
 8001896:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a17      	ldr	r2, [pc, #92]	; (80018f8 <TIM_OC1_SetConfig+0xe8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d007      	beq.n	80018b0 <TIM_OC1_SetConfig+0xa0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a16      	ldr	r2, [pc, #88]	; (80018fc <TIM_OC1_SetConfig+0xec>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d003      	beq.n	80018b0 <TIM_OC1_SetConfig+0xa0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a15      	ldr	r2, [pc, #84]	; (8001900 <TIM_OC1_SetConfig+0xf0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d111      	bne.n	80018d4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4a14      	ldr	r2, [pc, #80]	; (8001904 <TIM_OC1_SetConfig+0xf4>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4a13      	ldr	r2, [pc, #76]	; (8001908 <TIM_OC1_SetConfig+0xf8>)
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	621a      	str	r2, [r3, #32]
}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b006      	add	sp, #24
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	40012c00 	.word	0x40012c00
 80018fc:	40014400 	.word	0x40014400
 8001900:	40014800 	.word	0x40014800
 8001904:	fffffeff 	.word	0xfffffeff
 8001908:	fffffdff 	.word	0xfffffdff

0800190c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	2210      	movs	r2, #16
 800191c:	4393      	bics	r3, r2
 800191e:	001a      	movs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4a2c      	ldr	r2, [pc, #176]	; (80019ec <TIM_OC2_SetConfig+0xe0>)
 800193a:	4013      	ands	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4a2b      	ldr	r2, [pc, #172]	; (80019f0 <TIM_OC2_SetConfig+0xe4>)
 8001942:	4013      	ands	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2220      	movs	r2, #32
 8001956:	4393      	bics	r3, r2
 8001958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	4313      	orrs	r3, r2
 8001964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a22      	ldr	r2, [pc, #136]	; (80019f4 <TIM_OC2_SetConfig+0xe8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10d      	bne.n	800198a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	4393      	bics	r3, r2
 8001974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2240      	movs	r2, #64	; 0x40
 8001986:	4393      	bics	r3, r2
 8001988:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <TIM_OC2_SetConfig+0xe8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <TIM_OC2_SetConfig+0x96>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <TIM_OC2_SetConfig+0xec>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d003      	beq.n	80019a2 <TIM_OC2_SetConfig+0x96>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a17      	ldr	r2, [pc, #92]	; (80019fc <TIM_OC2_SetConfig+0xf0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d113      	bne.n	80019ca <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4a16      	ldr	r2, [pc, #88]	; (8001a00 <TIM_OC2_SetConfig+0xf4>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <TIM_OC2_SetConfig+0xf8>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	621a      	str	r2, [r3, #32]
}
 80019e4:	46c0      	nop			; (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b006      	add	sp, #24
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	ffff8fff 	.word	0xffff8fff
 80019f0:	fffffcff 	.word	0xfffffcff
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	40014400 	.word	0x40014400
 80019fc:	40014800 	.word	0x40014800
 8001a00:	fffffbff 	.word	0xfffffbff
 8001a04:	fffff7ff 	.word	0xfffff7ff

08001a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a33      	ldr	r2, [pc, #204]	; (8001ae4 <TIM_OC3_SetConfig+0xdc>)
 8001a18:	401a      	ands	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2270      	movs	r2, #112	; 0x70
 8001a34:	4393      	bics	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	4393      	bics	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <TIM_OC3_SetConfig+0xe0>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a22      	ldr	r2, [pc, #136]	; (8001aec <TIM_OC3_SetConfig+0xe4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d10d      	bne.n	8001a82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <TIM_OC3_SetConfig+0xe8>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <TIM_OC3_SetConfig+0xec>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a19      	ldr	r2, [pc, #100]	; (8001aec <TIM_OC3_SetConfig+0xe4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <TIM_OC3_SetConfig+0x92>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a1a      	ldr	r2, [pc, #104]	; (8001af8 <TIM_OC3_SetConfig+0xf0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d003      	beq.n	8001a9a <TIM_OC3_SetConfig+0x92>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a19      	ldr	r2, [pc, #100]	; (8001afc <TIM_OC3_SetConfig+0xf4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d113      	bne.n	8001ac2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4a18      	ldr	r2, [pc, #96]	; (8001b00 <TIM_OC3_SetConfig+0xf8>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <TIM_OC3_SetConfig+0xfc>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	621a      	str	r2, [r3, #32]
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b006      	add	sp, #24
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	fffffeff 	.word	0xfffffeff
 8001ae8:	fffffdff 	.word	0xfffffdff
 8001aec:	40012c00 	.word	0x40012c00
 8001af0:	fffff7ff 	.word	0xfffff7ff
 8001af4:	fffffbff 	.word	0xfffffbff
 8001af8:	40014400 	.word	0x40014400
 8001afc:	40014800 	.word	0x40014800
 8001b00:	ffffefff 	.word	0xffffefff
 8001b04:	ffffdfff 	.word	0xffffdfff

08001b08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <TIM_OC4_SetConfig+0xa8>)
 8001b18:	401a      	ands	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4a20      	ldr	r2, [pc, #128]	; (8001bb4 <TIM_OC4_SetConfig+0xac>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4a1f      	ldr	r2, [pc, #124]	; (8001bb8 <TIM_OC4_SetConfig+0xb0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4a1b      	ldr	r2, [pc, #108]	; (8001bbc <TIM_OC4_SetConfig+0xb4>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	031b      	lsls	r3, r3, #12
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a17      	ldr	r2, [pc, #92]	; (8001bc0 <TIM_OC4_SetConfig+0xb8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d007      	beq.n	8001b78 <TIM_OC4_SetConfig+0x70>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a16      	ldr	r2, [pc, #88]	; (8001bc4 <TIM_OC4_SetConfig+0xbc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d003      	beq.n	8001b78 <TIM_OC4_SetConfig+0x70>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <TIM_OC4_SetConfig+0xc0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d109      	bne.n	8001b8c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <TIM_OC4_SetConfig+0xc4>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	621a      	str	r2, [r3, #32]
}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b006      	add	sp, #24
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	ffffefff 	.word	0xffffefff
 8001bb4:	ffff8fff 	.word	0xffff8fff
 8001bb8:	fffffcff 	.word	0xfffffcff
 8001bbc:	ffffdfff 	.word	0xffffdfff
 8001bc0:	40012c00 	.word	0x40012c00
 8001bc4:	40014400 	.word	0x40014400
 8001bc8:	40014800 	.word	0x40014800
 8001bcc:	ffffbfff 	.word	0xffffbfff

08001bd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	221f      	movs	r2, #31
 8001be0:	4013      	ands	r3, r2
 8001be2:	2201      	movs	r2, #1
 8001be4:	409a      	lsls	r2, r3
 8001be6:	0013      	movs	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	43d2      	mvns	r2, r2
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a1a      	ldr	r2, [r3, #32]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	211f      	movs	r1, #31
 8001c00:	400b      	ands	r3, r1
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4099      	lsls	r1, r3
 8001c06:	000b      	movs	r3, r1
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	621a      	str	r2, [r3, #32]
}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b006      	add	sp, #24
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	223c      	movs	r2, #60	; 0x3c
 8001c26:	5c9b      	ldrb	r3, [r3, r2]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e042      	b.n	8001cb6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	223c      	movs	r2, #60	; 0x3c
 8001c34:	2101      	movs	r1, #1
 8001c36:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	223d      	movs	r2, #61	; 0x3d
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2270      	movs	r2, #112	; 0x70
 8001c54:	4393      	bics	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d00a      	beq.n	8001c8a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	05db      	lsls	r3, r3, #23
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d004      	beq.n	8001c8a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d10c      	bne.n	8001ca4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	4393      	bics	r3, r2
 8001c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	223d      	movs	r2, #61	; 0x3d
 8001ca8:	2101      	movs	r1, #1
 8001caa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	223c      	movs	r2, #60	; 0x3c
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b004      	add	sp, #16
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	40012c00 	.word	0x40012c00
 8001cc4:	40000400 	.word	0x40000400

08001cc8 <__libc_init_array>:
 8001cc8:	b570      	push	{r4, r5, r6, lr}
 8001cca:	2600      	movs	r6, #0
 8001ccc:	4d0c      	ldr	r5, [pc, #48]	; (8001d00 <__libc_init_array+0x38>)
 8001cce:	4c0d      	ldr	r4, [pc, #52]	; (8001d04 <__libc_init_array+0x3c>)
 8001cd0:	1b64      	subs	r4, r4, r5
 8001cd2:	10a4      	asrs	r4, r4, #2
 8001cd4:	42a6      	cmp	r6, r4
 8001cd6:	d109      	bne.n	8001cec <__libc_init_array+0x24>
 8001cd8:	2600      	movs	r6, #0
 8001cda:	f000 f821 	bl	8001d20 <_init>
 8001cde:	4d0a      	ldr	r5, [pc, #40]	; (8001d08 <__libc_init_array+0x40>)
 8001ce0:	4c0a      	ldr	r4, [pc, #40]	; (8001d0c <__libc_init_array+0x44>)
 8001ce2:	1b64      	subs	r4, r4, r5
 8001ce4:	10a4      	asrs	r4, r4, #2
 8001ce6:	42a6      	cmp	r6, r4
 8001ce8:	d105      	bne.n	8001cf6 <__libc_init_array+0x2e>
 8001cea:	bd70      	pop	{r4, r5, r6, pc}
 8001cec:	00b3      	lsls	r3, r6, #2
 8001cee:	58eb      	ldr	r3, [r5, r3]
 8001cf0:	4798      	blx	r3
 8001cf2:	3601      	adds	r6, #1
 8001cf4:	e7ee      	b.n	8001cd4 <__libc_init_array+0xc>
 8001cf6:	00b3      	lsls	r3, r6, #2
 8001cf8:	58eb      	ldr	r3, [r5, r3]
 8001cfa:	4798      	blx	r3
 8001cfc:	3601      	adds	r6, #1
 8001cfe:	e7f2      	b.n	8001ce6 <__libc_init_array+0x1e>
 8001d00:	08001d68 	.word	0x08001d68
 8001d04:	08001d68 	.word	0x08001d68
 8001d08:	08001d68 	.word	0x08001d68
 8001d0c:	08001d6c 	.word	0x08001d6c

08001d10 <memset>:
 8001d10:	0003      	movs	r3, r0
 8001d12:	1812      	adds	r2, r2, r0
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d100      	bne.n	8001d1a <memset+0xa>
 8001d18:	4770      	bx	lr
 8001d1a:	7019      	strb	r1, [r3, #0]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	e7f9      	b.n	8001d14 <memset+0x4>

08001d20 <_init>:
 8001d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d26:	bc08      	pop	{r3}
 8001d28:	469e      	mov	lr, r3
 8001d2a:	4770      	bx	lr

08001d2c <_fini>:
 8001d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d32:	bc08      	pop	{r3}
 8001d34:	469e      	mov	lr, r3
 8001d36:	4770      	bx	lr
